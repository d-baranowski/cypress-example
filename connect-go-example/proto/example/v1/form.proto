syntax = "proto3";

package example.v1;

option go_package = "example/gen/example/v1;examplev1";

// FormModel definition
message FormModel {
  int64 id = 1;
  string name = 2;
  int32 age = 3;
  string dateTime = 4;  // RFC3339 formatted string for DateTime
  repeated string skills = 5;
  string city = 6;
  repeated int32 range = 7;
  bool termsAccepted = 8;
  int32 satisfactionLevel = 9;
  string gender = 10;  // Enum "male", "female", "other"
  repeated Todo todos = 11;
}

// Todo item definition
message Todo {
  int64 id = 1;
  string task = 2;
  int64 formId = 3;
}

// Request to create a FormModel
message CreateFormModelRequest {
  FormModel formModel = 1;
}

// Response containing a single FormModel
message GetFormModelResponse {
  FormModel formModel = 1;
}

// Request to get a single FormModel by ID
message GetFormModelRequest {
  string id = 1;
}

// Request to list FormModels with optional pagination
message ListFormModelsRequest {
  int32 page = 1;
  int32 pageSize = 2;
}

// Response for listing FormModels
message ListFormModelsResponse {
  repeated FormModel formModels = 1;
  int32 totalCount = 2;
}


// Request to delete a single FormModel by ID
message DeleteFormModelRequest {
  int64 id = 1;
}

// Response for delete operation
message DeleteFormModelResponse {
  bool success = 1;
}

// FormModelService definition
service FormModelService {
  // Save a form model
  rpc SaveFormModel(CreateFormModelRequest) returns (GetFormModelResponse);

  // Get a single form model by ID
  rpc GetFormModel(GetFormModelRequest) returns (GetFormModelResponse);

  // List all form models with pagination
  rpc ListFormModels(ListFormModelsRequest) returns (ListFormModelsResponse);

  // Delete a form model by ID
  rpc DeleteFormModel(DeleteFormModelRequest) returns (DeleteFormModelResponse);
}
