// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/v1/form.proto

package examplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/gen/example/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FormModelServiceName is the fully-qualified name of the FormModelService service.
	FormModelServiceName = "example.v1.FormModelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FormModelServiceSaveFormModelProcedure is the fully-qualified name of the FormModelService's
	// SaveFormModel RPC.
	FormModelServiceSaveFormModelProcedure = "/example.v1.FormModelService/SaveFormModel"
	// FormModelServiceGetFormModelProcedure is the fully-qualified name of the FormModelService's
	// GetFormModel RPC.
	FormModelServiceGetFormModelProcedure = "/example.v1.FormModelService/GetFormModel"
	// FormModelServiceListFormModelsProcedure is the fully-qualified name of the FormModelService's
	// ListFormModels RPC.
	FormModelServiceListFormModelsProcedure = "/example.v1.FormModelService/ListFormModels"
	// FormModelServiceDeleteFormModelProcedure is the fully-qualified name of the FormModelService's
	// DeleteFormModel RPC.
	FormModelServiceDeleteFormModelProcedure = "/example.v1.FormModelService/DeleteFormModel"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	formModelServiceServiceDescriptor               = v1.File_example_v1_form_proto.Services().ByName("FormModelService")
	formModelServiceSaveFormModelMethodDescriptor   = formModelServiceServiceDescriptor.Methods().ByName("SaveFormModel")
	formModelServiceGetFormModelMethodDescriptor    = formModelServiceServiceDescriptor.Methods().ByName("GetFormModel")
	formModelServiceListFormModelsMethodDescriptor  = formModelServiceServiceDescriptor.Methods().ByName("ListFormModels")
	formModelServiceDeleteFormModelMethodDescriptor = formModelServiceServiceDescriptor.Methods().ByName("DeleteFormModel")
)

// FormModelServiceClient is a client for the example.v1.FormModelService service.
type FormModelServiceClient interface {
	// Save a form model
	SaveFormModel(context.Context, *connect.Request[v1.CreateFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error)
	// Get a single form model by ID
	GetFormModel(context.Context, *connect.Request[v1.GetFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error)
	// List all form models with pagination
	ListFormModels(context.Context, *connect.Request[v1.ListFormModelsRequest]) (*connect.Response[v1.ListFormModelsResponse], error)
	// Delete a form model by ID
	DeleteFormModel(context.Context, *connect.Request[v1.DeleteFormModelRequest]) (*connect.Response[v1.DeleteFormModelResponse], error)
}

// NewFormModelServiceClient constructs a client for the example.v1.FormModelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFormModelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FormModelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &formModelServiceClient{
		saveFormModel: connect.NewClient[v1.CreateFormModelRequest, v1.GetFormModelResponse](
			httpClient,
			baseURL+FormModelServiceSaveFormModelProcedure,
			connect.WithSchema(formModelServiceSaveFormModelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFormModel: connect.NewClient[v1.GetFormModelRequest, v1.GetFormModelResponse](
			httpClient,
			baseURL+FormModelServiceGetFormModelProcedure,
			connect.WithSchema(formModelServiceGetFormModelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFormModels: connect.NewClient[v1.ListFormModelsRequest, v1.ListFormModelsResponse](
			httpClient,
			baseURL+FormModelServiceListFormModelsProcedure,
			connect.WithSchema(formModelServiceListFormModelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteFormModel: connect.NewClient[v1.DeleteFormModelRequest, v1.DeleteFormModelResponse](
			httpClient,
			baseURL+FormModelServiceDeleteFormModelProcedure,
			connect.WithSchema(formModelServiceDeleteFormModelMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// formModelServiceClient implements FormModelServiceClient.
type formModelServiceClient struct {
	saveFormModel   *connect.Client[v1.CreateFormModelRequest, v1.GetFormModelResponse]
	getFormModel    *connect.Client[v1.GetFormModelRequest, v1.GetFormModelResponse]
	listFormModels  *connect.Client[v1.ListFormModelsRequest, v1.ListFormModelsResponse]
	deleteFormModel *connect.Client[v1.DeleteFormModelRequest, v1.DeleteFormModelResponse]
}

// SaveFormModel calls example.v1.FormModelService.SaveFormModel.
func (c *formModelServiceClient) SaveFormModel(ctx context.Context, req *connect.Request[v1.CreateFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error) {
	return c.saveFormModel.CallUnary(ctx, req)
}

// GetFormModel calls example.v1.FormModelService.GetFormModel.
func (c *formModelServiceClient) GetFormModel(ctx context.Context, req *connect.Request[v1.GetFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error) {
	return c.getFormModel.CallUnary(ctx, req)
}

// ListFormModels calls example.v1.FormModelService.ListFormModels.
func (c *formModelServiceClient) ListFormModels(ctx context.Context, req *connect.Request[v1.ListFormModelsRequest]) (*connect.Response[v1.ListFormModelsResponse], error) {
	return c.listFormModels.CallUnary(ctx, req)
}

// DeleteFormModel calls example.v1.FormModelService.DeleteFormModel.
func (c *formModelServiceClient) DeleteFormModel(ctx context.Context, req *connect.Request[v1.DeleteFormModelRequest]) (*connect.Response[v1.DeleteFormModelResponse], error) {
	return c.deleteFormModel.CallUnary(ctx, req)
}

// FormModelServiceHandler is an implementation of the example.v1.FormModelService service.
type FormModelServiceHandler interface {
	// Save a form model
	SaveFormModel(context.Context, *connect.Request[v1.CreateFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error)
	// Get a single form model by ID
	GetFormModel(context.Context, *connect.Request[v1.GetFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error)
	// List all form models with pagination
	ListFormModels(context.Context, *connect.Request[v1.ListFormModelsRequest]) (*connect.Response[v1.ListFormModelsResponse], error)
	// Delete a form model by ID
	DeleteFormModel(context.Context, *connect.Request[v1.DeleteFormModelRequest]) (*connect.Response[v1.DeleteFormModelResponse], error)
}

// NewFormModelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFormModelServiceHandler(svc FormModelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	formModelServiceSaveFormModelHandler := connect.NewUnaryHandler(
		FormModelServiceSaveFormModelProcedure,
		svc.SaveFormModel,
		connect.WithSchema(formModelServiceSaveFormModelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	formModelServiceGetFormModelHandler := connect.NewUnaryHandler(
		FormModelServiceGetFormModelProcedure,
		svc.GetFormModel,
		connect.WithSchema(formModelServiceGetFormModelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	formModelServiceListFormModelsHandler := connect.NewUnaryHandler(
		FormModelServiceListFormModelsProcedure,
		svc.ListFormModels,
		connect.WithSchema(formModelServiceListFormModelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	formModelServiceDeleteFormModelHandler := connect.NewUnaryHandler(
		FormModelServiceDeleteFormModelProcedure,
		svc.DeleteFormModel,
		connect.WithSchema(formModelServiceDeleteFormModelMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.v1.FormModelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FormModelServiceSaveFormModelProcedure:
			formModelServiceSaveFormModelHandler.ServeHTTP(w, r)
		case FormModelServiceGetFormModelProcedure:
			formModelServiceGetFormModelHandler.ServeHTTP(w, r)
		case FormModelServiceListFormModelsProcedure:
			formModelServiceListFormModelsHandler.ServeHTTP(w, r)
		case FormModelServiceDeleteFormModelProcedure:
			formModelServiceDeleteFormModelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFormModelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFormModelServiceHandler struct{}

func (UnimplementedFormModelServiceHandler) SaveFormModel(context.Context, *connect.Request[v1.CreateFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.FormModelService.SaveFormModel is not implemented"))
}

func (UnimplementedFormModelServiceHandler) GetFormModel(context.Context, *connect.Request[v1.GetFormModelRequest]) (*connect.Response[v1.GetFormModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.FormModelService.GetFormModel is not implemented"))
}

func (UnimplementedFormModelServiceHandler) ListFormModels(context.Context, *connect.Request[v1.ListFormModelsRequest]) (*connect.Response[v1.ListFormModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.FormModelService.ListFormModels is not implemented"))
}

func (UnimplementedFormModelServiceHandler) DeleteFormModel(context.Context, *connect.Request[v1.DeleteFormModelRequest]) (*connect.Response[v1.DeleteFormModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.FormModelService.DeleteFormModel is not implemented"))
}
