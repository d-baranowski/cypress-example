package main

import (
	"context"
	"example/pkg/api"
	"example/pkg/migrations"
	"fmt"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/pgdialect"
	"github.com/uptrace/bun/driver/pgdriver"
	"github.com/uptrace/bun/migrate"
	"log"
	"net/http"

	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"example/gen/example/v1/examplev1connect" // generated by protoc-gen-connect-go

	connectcors "connectrpc.com/cors"
	"github.com/rs/cors"

	"database/sql"
	_ "github.com/uptrace/bun/driver/pgdriver" // Bun PostgreSQL driver
)

func main() {
	// PostgreSQL connection string
	dsn := "postgres://postgres:password@localhost:5432/example?sslmode=disable"

	// Open a sql.DB connection using pgdriver
	sqldb := sql.OpenDB(pgdriver.NewConnector(pgdriver.WithDSN(dsn)))

	// Create a Bun instance
	db := bun.NewDB(sqldb, pgdialect.New())

	// Ensure the database connection is working
	if err := db.Ping(); err != nil {
		log.Fatalf("failed to connect to the database: %v", err)
	}

	fmt.Println("Connected to PostgreSQL with Bun!")

	migrator := migrate.NewMigrator(db, migrations.Migrations)
	// Apply the migrations
	if err := migrator.Init(context.Background()); err != nil {
		log.Fatalf("failed to initialize migrator: %v", err)
	}

	group, err := migrator.Migrate(context.Background())
	if err != nil {
		log.Fatalf("failed to run migrations: %v", err)
	}

	fmt.Printf("Applied migration group: %s\n", group)

	// Close the database connection at the end
	defer db.Close()

	mux := http.NewServeMux()

	greeter := &api.GreetServer{}
	greeterPath, greeterHandler := examplev1connect.NewGreetServiceHandler(greeter)

	form := &api.FormServer{
		DB: db,
	}
	formPath, formHandler := examplev1connect.NewFormModelServiceHandler(form)

	mux.Handle(greeterPath, withCORS(greeterHandler))
	mux.Handle(formPath, withCORS(formHandler))

	log.Fatal(http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	))
}

// withCORS adds CORS support to a Connect HTTP handler.
func withCORS(connectHandler http.Handler) http.Handler {
	c := cors.New(cors.Options{
		AllowedOrigins: []string{"http://localhost:3000"}, // replace with your domain
		AllowedMethods: connectcors.AllowedMethods(),
		AllowedHeaders: []string{
			"Content-Type",             // for all protocols
			"Connect-Protocol-Version", // for Connect
			"Connect-Timeout-Ms",       // for Connect
			"Grpc-Timeout",             // for gRPC-web
			"X-Grpc-Web",               // for gRPC-web
			"X-User-Agent",             // for all protocols
			"Referer",
			"Sec-Ch-Ua",
			"Sec-Ch-Ua-Mobile",
			"Sec-Ch-Ua-Platform",
			"User-Agent",
		},
		ExposedHeaders: connectcors.ExposedHeaders(),
		MaxAge:         7200, // 2 hours in seconds
	})
	return c.Handler(connectHandler)
}
